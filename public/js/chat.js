// chat.js
function copyText(text, btn) {
  navigator.clipboard.writeText(text).then(() => {
    const container = btn.closest('.message');
    const textBlock = container.querySelector('.message-text');
    showCopiedIndicator(textBlock);
  });
}

function showCopiedIndicator(targetElement) {
  const indicator = document.createElement('div');
  indicator.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
  indicator.className = 'copy-indicator';
  targetElement.appendChild(indicator);

  setTimeout(() => {
    indicator.remove();
  }, 1500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É —á–∞—Ç–∞
function isBelowHalf(element) {
  if (!element) return false;
  const visibleBottom = element.scrollTop + element.clientHeight;
  const halfway = element.scrollHeight / 2;
  return visibleBottom >= halfway;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑
function scrollToBottom(element) {
  if (element) {
    element.scrollTo({
      top: element.scrollHeight,
      behavior: 'smooth'
    });
  }
}

function scrollToBottom(element) {
  if (element) {
    console.log('[scroll] –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑!');
    element.scrollTop = element.scrollHeight;
  }
}


document.addEventListener('DOMContentLoaded', () => {
  const socket = io();
  const elements = {
    steamUserInfo: document.getElementById('steam-user-info'),
    profileStatus: document.getElementById('profileStatus'),
    sendMessageButton: document.getElementById('sendMessage'),
    messageInput: document.getElementById('message'),
    messagesList: document.querySelector('.chat-messages'),
    profileLink: document.getElementById('profile-link'),
    profileWarning: document.getElementById('profile-warning'),
    chatTitle: document.getElementById('chatTitle'),
    backToGlobalBtn: document.getElementById('backToGlobal'),
    backToChatBtn: document.getElementById('backToChatBtn'),
    friendInfo: document.getElementById('friend-info'),
    friendAvatar: document.getElementById('friend-avatar'),
    friendName: document.getElementById('friend-name'),
    friendProfileLink: document.getElementById('friend-profile-link'),
    notificationSound: document.getElementById('notificationSound'),
    typingIndicator: document.getElementById('typing-indicator'),
    scrollToBottomBtn: document.getElementById('scrollToBottomBtn'),

  };

  const emojiList = [..."üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòâüòäüòãüòéüòçüòòü•∞üòóüòôüòöüôÇü§óü§©ü§îü§®üòêüòëüò∂üôÑüòèüò£üò•üòÆ‚Äçüí®üòÆüòØüò™üò´ü•±üò¥üòåüòõüòúüòùü§§üòíüòìüòîüòïüôÉü§ëüò≤üò∑ü§íü§ïü§¢ü§Æü§ßü•µü•∂üòµ‚Äçüí´üòµü•¥üò†üò°ü§¨üò§üò≠üò¢üò•üòìü§Øüò≥ü•∫üò¨üò∞üò±üòñüòûüòüüò§üò©üò®üòßüò¶üòøüòæüôÄüò∏üòπüòªüòºüòΩüëãü§öüñê‚úãüññüëåü§è‚úåÔ∏èü§ûü§üü§òü§ôüëàüëâüëÜüëá‚òùÔ∏èüëçüëé‚úäüëäü§õü§úüëèüôåüëêü§≤üôè‚úçÔ∏èüíÖü§≥üí™ü¶æü¶øü¶µü¶∂üëÇüëÉüß†ü¶∑ü¶¥üëÄüëÅÔ∏èüëÖüëÑüíã‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§ü§çü§éüíî‚ù£Ô∏èüíïüíûüíìüíóüíñüíòüíùüíüüîûüéÆüé≤üéØüèÜ‚öΩüèÄüèà‚öæüéæüèêü•éüèìüè∏ü•Ö‚õ≥ü•áü•àü•âüéÆ"]; // –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë

  const emojiPicker = document.getElementById('emojiPicker');
  const toggleEmojiPickerBtn = document.getElementById('toggleEmojiPicker');

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ —Å–º–∞–π–ª–æ–≤
  toggleEmojiPickerBtn.addEventListener('click', () => {
    emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';
  });

  const messageInput = document.getElementById('message');

  // –û—Ç—Ä–∏—Å—É–µ–º —Å–º–∞–π–ª—ã
  emojiList.forEach(emoji => {
    const span = document.createElement('span');
    span.textContent = emoji;
    span.addEventListener('click', () => {
      messageInput.value += emoji;
      messageInput.focus();
    });
    emojiPicker.appendChild(span);
  });

  const urlParts = window.location.pathname.split('/');
  const friendId = urlParts.length > 2 ? urlParts[2] : null;

  let steamUser = null;
  let currentRoomId = null;
  let recipientSteamId = null;
  let typingTimeout = null;

  fetch('/steam-profile')
    .then(response => response.json())
    .then(data => {
      steamUser = data;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (elements.steamUserInfo) {
        elements.steamUserInfo.innerHTML = `
          <p>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: <strong>${steamUser.personaname}</strong></p>
          <img src="${steamUser.avatar}" alt="–ê–≤–∞—Ç–∞—Ä" class="user-avatar">
        `;
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
      if (elements.profileStatus) {
        elements.profileStatus.textContent = steamUser.isPublic 
          ? '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç' 
          : '‚ö† –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç';
        elements.profileStatus.style.color = steamUser.isPublic 
          ? 'green' 
          : 'darkred';
      }

      if (!steamUser.isPublic && elements.profileWarning) {
        elements.profileWarning.style.display = 'block';
      }

      if (elements.profileLink) elements.profileLink.href = `/profile/${steamUser.steamId}`;

      if (friendId) {
        recipientSteamId = friendId;
        const roomId = [steamUser.steamId, friendId].sort().join('_');
        currentRoomId = roomId;
        socket.emit('joinPrivateChat', { userId: steamUser.steamId, friendId });
        if (elements.backToGlobalBtn) elements.backToGlobalBtn.style.display = 'inline';

        fetch(`/steam-user/${friendId}`)
          .then(res => res.json())
          .then(friend => {
            if (elements.chatTitle) elements.chatTitle.innerText = `üí¨ –ß–∞—Ç —Å ${friend.personaname}`;
            if (elements.friendInfo) elements.friendInfo.style.display = 'block';
            if (elements.friendAvatar) elements.friendAvatar.src = friend.avatar || '/images/default-avatar.png';
            if (elements.friendName) elements.friendName.textContent = friend.personaname;
            if (elements.friendProfileLink) elements.friendProfileLink.href = `/profile/${friendId}`;
          })
          .catch(() => {
            if (elements.chatTitle) elements.chatTitle.innerText = 'üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç';
          });
      } else {
        socket.emit('joinChat', steamUser);
      }
    });

  if (elements.backToGlobalBtn) {
    elements.backToGlobalBtn.addEventListener('click', () => {
      currentRoomId = null;
      if (elements.friendInfo) elements.friendInfo.style.display = 'none';
      if (elements.chatTitle) elements.chatTitle.innerText = 'üåê –û–±—â–∏–π —á–∞—Ç';
      elements.backToGlobalBtn.style.display = 'none';
      if (elements.messagesList) elements.messagesList.innerHTML = '';
      socket.emit('joinChat', steamUser);
    });
  }

  const MAX_MESSAGE_LENGTH = 500;

  if (elements.sendMessageButton) {
    elements.sendMessageButton.addEventListener('click', sendMessageHandler);
  }

  if (elements.messageInput) {
    elements.messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') sendMessageHandler();
    });

    elements.messageInput.addEventListener('input', () => {
      socket.emit('typing', { to: recipientSteamId });
    });
  }

  socket.on('message', (msg) => {
    if (elements.notificationSound) elements.notificationSound.play().catch(() => {});
    addMessage(msg);
  
    // ‚¨á –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–µ—Ä–µ–∑ requestAnimationFrame ‚Äî —Ç–æ—á–Ω–æ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    requestAnimationFrame(() => {
      if (isBelowHalf(elements.messagesList)) {
        scrollToBottom(elements.messagesList);
      }
    });
    
  });
  

  socket.on('chatHistory', (msgs) => {
    if (elements.messagesList) {
      elements.messagesList.innerHTML = '';
      msgs.forEach(addMessage);
      // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
      scrollToBottom(elements.messagesList);
    }
  });

  socket.on('error', (error) => {
    console.error('Socket error:', error);
    alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
  });

  socket.on('typing', (data) => {
    if (data.from === recipientSteamId && elements.typingIndicator) {
      elements.typingIndicator.innerText = `${data.username} –ø–∏—à–µ—Ç...`;
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        if (elements.typingIndicator) elements.typingIndicator.innerText = '';
      }, 3000);
    }
  });

  socket.on('connect_error', (err) => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
    alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
  });

  function addMessage(message) {
    if (!elements.messagesList) return;

    const li = document.createElement('li');
    li.className = 'message';

    li.innerHTML = `
      <img src="${message.steamAvatar}" class="message-avatar">
      <div class="message-content">
        <div class="message-header clickable-area" data-steamid="${message.steamId}">
          <span class="sender">${message.steamName}</span>
          <span class="time">${message.timestamp}</span>
        </div>
        <p class="message-text">${message.text}</p>
      </div>
      <div class="message-actions">
        <button onclick="copyText('${message.text.replace(/'/g, "\\'")}', this)">üìã</button>
      </div>
    `;

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const clickableArea = li.querySelector('.clickable-area');
    if (clickableArea) {
      clickableArea.addEventListener('click', async (e) => {
        const steamId = e.currentTarget.dataset.steamid;
        if (steamId === steamUser.steamId) return;

        try {
          const response = await fetch(/api/is-friend/$,{steamId});
          const { isFriend } = await response.json();
          showContextMenu(e.clientX, e.clientY, steamId, isFriend);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞:', err);
          showContextMenu(e.clientX, e.clientY, steamId, false);
        }
      });
    }

    elements.scrollToBottomBtn.addEventListener('click', () => {
      scrollToBottom(elements.messagesList);
    });
    

    elements.messagesList.appendChild(li);
    elements.messagesList.addEventListener('scroll', () => {
      const el = elements.messagesList;
      if (!isBelowHalf(el)) {
        elements.scrollToBottomBtn.classList.add('show');
      } else {
        elements.scrollToBottomBtn.classList.remove('show');
      }
    });
    
  }

  fetch('/api/friends')
    .then(res => res.json())
    .then(data => {
      const container = document.getElementById('friendListContainer');
      if (!container) return;

      container.innerHTML = '';

      if (Array.isArray(data.friends)) {
        data.forEach(friend => {
          const el = document.createElement('div');
          el.style.textAlign = 'center';
          el.style.marginBottom = '10px';
          el.innerHTML = `
            <img src="${friend.avatar}" width="40" height="40" style="border-radius:50%;"><br>
            <span>${friend.personaname}</span><br>
            <button onclick="openPrivateChat('${friend.steamid}')">üí¨ –ß–∞—Ç</button><br>
            <button class="friend-profile" data-id="${friend.steamid}">üë§ –ü—Ä–æ—Ñ–∏–ª—å</button>
          `;
          container.appendChild(el);
        });
      }
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:', err);
    });

  function openPrivateChat(friendSteamID) {
    window.location.href = `/chat/${friendSteamID}`;
  }

  function savePreviousChatPathOnce() {
    if (!sessionStorage.getItem('previousChatPath')) {
      sessionStorage.setItem('previousChatPath', window.location.pathname);
    }
  }

  if (sessionStorage.getItem('previousChatPath') && elements.backToChatBtn) {
    elements.backToChatBtn.style.display = 'inline';
    elements.backToChatBtn.addEventListener('click', () => {
      const backTo = sessionStorage.getItem('previousChatPath');
      sessionStorage.removeItem('previousChatPath');
      window.location.href = backTo;
    });
  }

  if (elements.profileLink) {
    elements.profileLink.addEventListener('click', savePreviousChatPathOnce);
  }

  document.addEventListener('click', (e) => {
    if (!emojiPicker.contains(e.target) && e.target !== toggleEmojiPickerBtn) {
      emojiPicker.style.display = 'none';
    }
  });
  
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('friend-profile')) {
      savePreviousChatPathOnce();
      const id = e.target.dataset.id;
      window.location.href = `/profile/${id}`;
    }
  });

  document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') {
    document.getElementById('emojiPicker').style.display = 'none';
  }
});

  function sendMessageHandler() {
    const text = elements.messageInput.value.trim();
    if (!text) return;

    if (currentRoomId) {
      const [u1, u2] = currentRoomId.split('_');
      const toId = steamUser.steamId === u1 ? u2 : u1;
      
      socket.emit('sendPrivateMessage', {
        userId: steamUser.steamId,
        friendId: toId,
        message: text,
        roomId: currentRoomId
      });
    } else {
      socket.emit('sendMessage', text);
    }
    elements.messageInput.value = '';
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => {
      scrollToBottom(elements.messagesList);
    }, 100);
  }
});