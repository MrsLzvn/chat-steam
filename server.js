require('dotenv').config();
const express = require('express');
const session = require('express-session');
const passport = require('passport');
const SteamStrategy = require('passport-steam').Strategy;
const mongoose = require('mongoose');
const socketIo = require('socket.io');
const http = require('http');
const cors = require('cors');
const path = require('path');
const mustacheExpress = require('mustache-express');
const axios = require('axios');

const fs = require('fs');

const User = require('./models/User');
const Message = require('./models/Message');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, { cors: { origin: '*' } });

const PORT = process.env.PORT || 3000;
const STEAM_API_KEY = process.env.STEAM_API_KEY;

const moment = require('moment'); // npm install moment


// üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function connectToMongoDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    process.exit(1);
  }
}
connectToMongoDB();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ Mustache
app.engine('mustache', mustacheExpress());
app.set('view engine', 'mustache');
app.set('views', path.join(__dirname, 'views'));
app.set('trust proxy', 1); // üîê Render ‚Äî —ç—Ç–æ –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã Express –∑–Ω–∞–ª –ø—Ä–æ HTTPS

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: process.env.SESSION_SECRET || 'keyboard cat',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: true,       // üîê –∫—É–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ HTTPS
    sameSite: 'lax'     // üõ°Ô∏è –∑–∞—â–∏—Ç–∞ –æ—Ç CSRF, –±–µ–∑ –ª–æ–º–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞
  }
}));


app.use(passport.initialize());
app.use(passport.session());
app.use((err, req, res, next) => {
    console.error('üî• –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', err.stack);
    res.status(500).send('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!');
});


//  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Steam-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
passport.use(new SteamStrategy({
  returnURL: process.env.STEAM_RETURN_URL,
  realm: process.env.STEAM_REALM,
  apiKey: process.env.STEAM_API_KEY
}, async (identifier, profile, done) => {
  try {
    const steamId = profile.id;
    const personaname = profile.displayName;
    const avatar = profile.photos[0].value;
    const profileurl = profile._json.profileurl;

    console.log(`üü¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${personaname} (${steamId})`);
    console.log('üõ¨ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç Steam:', {
      steamId: profile.id,
      displayName: profile.displayName
  });
  

    let user = await User.findOneAndUpdate(
      { steamId: steamId },
      { personaname, avatar, profileurl },
      { upsert: true, new: true }
    );

    return done(null, user);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ SteamStrategy:', err.message);
    return done(err);
  }
}));


passport.serializeUser((user, done) => {
  done(null, user.steamId);
});
passport.deserializeUser(async (steamId, done) => {
  try {
    const user = await User.findOne({ steamId });
    done(null, user);
  } catch (err) {
    done(err);
  }
});


// üö™ –ú–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/auth/steam', passport.authenticate('steam'));

app.get('/auth/steam/return', passport.authenticate('steam', { failureRedirect: '/' }),
  async (req, res) => {
    try {
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –°–µ—Å—Å–∏—è:', req.session);
      res.redirect('/friends');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ Steam –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      res.status(500).send('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Steam');
    }
  }
);

app.get('/', async (req, res) => {
  if (!req.isAuthenticated()) return res.redirect('/auth/steam');
  res.redirect('/friends');
});


app.get('/api/friend/:steamid', async (req, res) => {
  const steamId = req.params.steamid;
  try {
      const user = await getSteamUserInfo(steamId);
      res.json({ success: true, friend: user });
  } catch (err) {
      res.json({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–µ' });
  }
});

app.get('/api/friends', async (req, res) => {
  if (!req.isAuthenticated()) return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });

  try {
    const steamId = req.user.steamId;
    const friendsList = await getFriends(steamId); // ‚¨Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    res.json(friendsList);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:', err.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–∑–µ–π' });
  }
});



// üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Steam API
const steamProfileCache = new Map();
const CACHE_TTL = 60 * 1000; // 60 —Å–µ–∫—É–Ω–¥

async function getSteamProfile(steamId) {
  const now = Date.now();
  const cached = steamProfileCache.get(steamId);

  if (cached && now - cached.timestamp < CACHE_TTL) {
    console.log(`‚ö° –ö—ç—à Hit: –ø—Ä–æ—Ñ–∏–ª—å ${steamId} –≤–∑—è—Ç –∏–∑ –ø–∞–º—è—Ç–∏`);
    return cached.data;
  }

  try {
    const url = `https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=${STEAM_API_KEY}&steamids=${steamId}`;
    
    console.log(`üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Steam API: ${url}`);
    const response = await axios.get(url);

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Steam API: ${response.status}`);

    const players = response.data?.response?.players;

    if (!players || players.length === 0) {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å Steam ${steamId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`);
      return null;
    }

    const profile = players[0];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    steamProfileCache.set(steamId, {
      data: profile,
      timestamp: now
    });

    console.log(`üõ¨ –ü–æ–ª—É—á–µ–Ω –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç Steam:`, profile);
    return profile;
    
  } catch (error) {
    if (error.response?.status === 429) {
      console.error('üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Steam API (429 Too Many Requests)');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è Steam API:', error.message);
    }
    return null;
  }
}




// üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/steam-profile', async (req, res) => {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }
    res.json(req.user);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ steam-profile:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

app.get('/steam-user/:steamId', async (req, res) => {
  const steamId = req.params.steamId;
  let user = null;

  try {
    const response = await axios.get('https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/', {
      params: {
        key: STEAM_API_KEY,
        steamids: steamId,
      },
    });

    if (
      response.data &&
      response.data.response &&
      response.data.response.players &&
      response.data.response.players.length > 0
    ) {
      user = response.data.response.players[0];
    } else {
      console.warn(`‚ö†Ô∏è Steam API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è SteamID ${steamId}`);
      return res.status(404).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç –∏–ª–∏ Steam API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
      });
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Steam:', err.message);
    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Steam. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }

  res.json(user);
});


app.get('/profile/:steamId', async (req, res) => {
  const steamId = req.params.steamId;

  try {
    const [summaryRes, bansRes, gamesRes] = await Promise.all([
      axios.get('https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/', {
        params: { key: STEAM_API_KEY, steamids: steamId }
      }),
      axios.get('https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/', {
        params: { key: STEAM_API_KEY, steamids: steamId }
      }),
      axios.get('https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/', {
        params: {
          key: STEAM_API_KEY,
          steamid: steamId,
          include_appinfo: true,
          include_played_free_games: true
        }
      })
    ]);

    const player = summaryRes.data.response.players[0];
    const banInfo = bansRes.data.players[0];
    const allGames = gamesRes.data.response?.games || [];

    const sortedGames = allGames
      .filter(g => g.playtime_forever > 0)
      .sort((a, b) => b.playtime_forever - a.playtime_forever)
      .slice(0, 10)
      .map(game => ({
        name: game.name,
        playtime: (game.playtime_forever / 60).toFixed(1),
        icon: `https://cdn.cloudflare.steamstatic.com/steam/apps/${game.appid}/capsule_184x69.jpg`,
        url: `https://store.steampowered.com/app/${game.appid}`
      }));

    const personastate = player.personastate || 0;
    const isOnline = personastate > 0;
    const isInGame = !!player.gameextrainfo;

    const statusLabel = isInGame
      ? `üéÆ –í –∏–≥—Ä–µ (${player.gameextrainfo})`
      : isOnline
      ? 'üü¢ –û–Ω–ª–∞–π–Ω'
      : '‚ö´ –û—Ñ—Ñ–ª–∞–π–Ω';

    let statusClass = 'status-offline';
    if (isInGame) statusClass = 'status-ingame';
    else if (isOnline) statusClass = 'status-online';

    const lastOnline = player.lastlogoff
      ? moment.unix(player.lastlogoff).fromNow()
      : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const user = {
      steamid: player.steamid,
      personaname: player.personaname,
      profileurl: player.profileurl,
      avatar: player.avatarfull,
      avatarfull: player.avatarfull,
      lastOnline,
      isOnline,
      statusLabel,
      statusClass,
      bans: banInfo,
      games: sortedGames
    };

    res.render('profile', { user });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è Steam:', err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è Steam');
  }
});



const NodeCache = require('node-cache');
const friendsCache = new NodeCache({ stdTTL: 300 }); // –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç

async function getFriends(steamId) {
  const cached = friendsCache.get(steamId);
  if (cached) return cached;

  try {
    const friendListResponse = await axios.get(
      'https://api.steampowered.com/ISteamUser/GetFriendList/v1/',
      {
        params: {
          key: STEAM_API_KEY,
          steamid: steamId,
          relationship: 'friend'
        }
      }
    );

    const friendIds = friendListResponse.data.friendslist.friends.map(f => f.steamid);

    const chunkSize = 100;
    const profileChunks = [];

    for (let i = 0; i < friendIds.length; i += chunkSize) {
      const chunk = friendIds.slice(i, i + chunkSize).join(',');

      const profileResponse = await axios.get(
        'https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/',
        {
          params: {
            key: STEAM_API_KEY,
            steamids: chunk
          }
        }
      );

      profileChunks.push(...profileResponse.data.response.players);
    }

    const friendsList = profileChunks
      .filter(p => p?.steamid && p?.personaname)
      .map(p => {
        const isInGame = p.gameextrainfo !== undefined;
        const isOnline = p.personastate > 0;

        let statusClass = 'offline';
        if (isInGame) statusClass = 'ingame';
        else if (isOnline) statusClass = 'online';

        return {
          steamid: p.steamid,
          personaname: p.personaname,
          avatar: p.avatarfull,
          profileurl: p.profileurl,
          online: isOnline,
          inGame: isInGame,
          game: p.gameextrainfo || null,
          statusClass
        };
      });

    // ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –≤ –∏–≥—Ä–µ ‚Üí –æ–Ω–ª–∞–π–Ω ‚Üí –æ—Ñ—Ñ–ª–∞–π–Ω
    friendsList.sort((a, b) => {
      const statusScore = (f) => f.inGame ? 2 : f.online ? 1 : 0;
      return statusScore(b) - statusScore(a);
    });

    friendsCache.set(steamId, friendsList);
    return friendsList;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:', error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π');
  }
}


// –ú–∞—Ä—à—Ä—É—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥—Ä—É–∑–µ–π
app.get('/friends', async (req, res) => {
  if (!req.isAuthenticated()) return res.redirect('/');

  try {
    const steamId = req.user.steamId;
    const page = parseInt(req.query.page) || 1;
    const perPage = 12;

    // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É (–≤ –∏–≥—Ä–µ ‚Üí –æ–Ω–ª–∞–π–Ω ‚Üí –æ—Ñ—Ñ–ª–∞–π–Ω)
    const friendsList = await getFriends(steamId);

    const total = friendsList.length;
    const totalPages = Math.ceil(total / perPage);
    const startIndex = (page - 1) * perPage;
    const endIndex = startIndex + perPage;

    res.render('friends', {
      friends: friendsList.slice(startIndex, endIndex), // ‚ùó –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
      currentPage: page,
      totalPages: totalPages,
      total: total,
      hasPagination: totalPages > 1,
      hasPrev: page > 1,
      hasNext: page < totalPages,
      prevPage: page - 1,
      nextPage: page + 1
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  }
});



// üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
app.get('/logout', (req, res) => {
  req.logout(err => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err.message);
      return res.status(500).send('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞');
    }
    req.session.destroy(() => {
      res.redirect('/');
    });
  });
});

app.get('/chat', (req, res) => {
  res.redirect('/friends');
});

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –¥—Ä—É–≥–æ–º

app.get('/chat/:friendId', async (req, res) => {
  if (!req.isAuthenticated()) return res.redirect('/');
  const user = await User.findOne({ steamId: req.user.steamId });
  


  if (!user) {
    return res.status(404).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  try {
    const friendId = req.params.friendId;
    const friend = await getSteamProfile(friendId);

    const isOnline = friend.personastate > 0;
    const isInGame = !!friend.gameextrainfo;

    let statusClass = 'status-offline';
    if (isInGame) statusClass = 'status-ingame';
    else if (isOnline) statusClass = 'status-online';

    friend.statusClass = statusClass;


    const roomId = [user.steamId, friendId].sort().join('_');
    const messages = await Message.find({ roomId }).sort({ timestamp: 1 });

    const formattedMessages = messages.map(msg => ({
      ...msg._doc,
      timestamp: moment(msg.timestamp).format('D MMM HH:mm')
    }));

    const fixedUser = {
      ...req.user,
      avatarfull: req.user.avatarfull || req.user.avatar?.replace(/\.jpg$/, '_full.jpg')
    };
    

    res.render('chat', {
      user: fixedUser,
      friend: friend,
      messages: formattedMessages,
      roomId: roomId,
      isPrivate: true
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', error);
    res.status(500).render('error', { 
      message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞',
      error: error.message 
    });
  }
});

app.get('/docs', (req, res) => {
  const specPath = path.join(__dirname, 'swagger.yaml');
  const spec = fs.readFileSync(specPath, 'utf8').replace(/'/g, "\\'");
  
  res.send(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>API Docs</title>
        <meta charset="utf-8"/>
        <script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"></script>
      </head>
      <body>
        <redoc spec='${spec}'></redoc>
      </body>
    </html>
  `);
});


// üß† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Socket.io
let users = [];

io.on('connection', (socket) => {
  console.log('üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);

 
// server.js
socket.on('joinPrivateChat', async ({ userId, friendId }) => {
  try {
    const roomId = [userId, friendId].sort().join('_');
    socket.join(roomId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log(`üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    
    const messages = await Message.find({ roomId }).sort({ timestamp: 1 });
    socket.emit('chatHistory', messages.map(msg => ({
      ...msg._doc,
      timestamp: moment(msg.timestamp).format('D MMM HH:mm')
    })));
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ joinPrivateChat:', err.message);
  }
});

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ sendPrivateMessage
// server.js
// server.js
socket.on('sendPrivateMessage', async ({ userId, friendId, message, roomId }) => {
  try {
    const user = await User.findOne({ steamId: userId });
    if (!user) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º roomId, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const finalRoomId = roomId || [userId, friendId].sort().join('_');
    
    const messageData = {
      text: message,
      steamName: user.personaname,
      steamAvatar: user.avatarfull,
      timestamp: new Date(),
      roomId: finalRoomId
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const newMessage = new Message(messageData);
    await newMessage.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    io.to(finalRoomId).emit('message', {
      ...messageData,
      timestamp: moment(messageData.timestamp).format('D MMM HH:mm')
    });

    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç–µ ${finalRoomId}`);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ sendPrivateMessage:', err.message);
  }
});

  socket.on('disconnect', () => {
    console.log('üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id);
    users = users.filter((u) => u.id !== socket.id);
  });
});


// üåç –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// üßØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});